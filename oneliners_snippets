## Mount network drive with authentication
sudo sshfs user@remote.server.address:/ /mnt/ -o allow_other,IdentityFile=~/.ssh/id_rsa

## Discussion and code here for displaying 'adjusted' curves, along with very strongly worded
## warnings that it is not valid for Cox PH

http://stats.stackexchange.com/questions/210622/how-to-plot-adjusted-kaplan-meier-curves

## The code for that page is:
library("survival")
require("survival")

days <- rpois(100, 3)
status <- rbinom(100,1,0.34)
group <- sample(c(1,2,3,4), 100, replace=TRUE)
df <- data.frame(days, status)

#overall survival
surv <- survfit(Surv(days, status)~1)
summary(surv)
plot(surv)

#survival by group
kmsurv <- survfit(Surv(days,status) ~ strata(group), df)
plot(kmsurv)

#survival adjusted to group effect
cox <- coxph(Surv(days,status)~group, df)
summary(cox)
plot(survfit(cox))

## Renaming part of filename
rename 's/ABC/XYZ/' *.dat

## Some git commands
git branch mybranch
## (creates it)

git checkout mybranch
## (checks it out)

## or for short
git checkout -b mybranch
## (does both at once)

# returns string w/o leading whitespace
trim.leading <- function (x)  sub("^\\s+", "", x)

# returns string w/o trailing whitespace
trim.trailing <- function (x) sub("\\s+$", "", x)

# returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)

## Ghost script pdf editing

gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=output.pdf pdffile1.pdf pdffile2.pdf

## which combines pdffile1.pdf and pdffile2.pdf into a single ouput.pdf.


## Delete certain pages of a PDF document:

gs -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -dFirstPage=m -dLastPage=n -sOutputFile=output.pdf input.pdf

## where m and n are positive integers (page numbers), i.e. the above command only prints out pages starting from page number m through n of input.pdf into output.pdf.

## find columns with nas anywhere
unlist(lapply(df, function(x) any(is.na(x))))

## Fix permissions on data files
find -type f -exec chmod a-wx {} \; && find -type d -exec chmod a-w {} \;

## Files that are in both Dir1 and Dir2:

find "$Dir1/" "$Dir2/" -printf '%P\n' | sort | uniq -d

## Files that are in Dir1 but not in Dir2:

find "$Dir1/" "$Dir2/" "$Dir2/" -printf '%P\n' | sort | uniq -u
find "fgez_dmc/src/" "WP1/src/" "WP1/src/" -printf '%P\n' | sort | uniq -u


## Files that are in both Dir1 and Dir2:
find "fgez_dmc/" "WP1/" -printf '%P\n' | sort | uniq -d


## Files that are in Dir2 but not in Dir1:

find "$Dir1/" "$Dir1/" "$Dir2/" -printf '%P\n' | sort | uniq -u


## If you want to know what's common to two directories then this is another way with much less coding.

#!/bin/bash

comm -12 <(ls -F $1) <(ls -F $2)

## Regex-gsub part of a filename where 'WP1' is the pattern to be replaced with the 'WP2' pattern
for i in *WP1*; do mv -n "$i" "${i/WP1/WP2}"; done

